/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/auth/token/login/": {
    /** Use this endpoint to obtain user authentication token. */
    post: operations["auth_token_login_create"];
    parameters: {};
  };
  "/auth/token/logout/": {
    /** Use this endpoint to logout user (remove user authentication token). */
    post: operations["auth_token_logout_create"];
    parameters: {};
  };
  "/banners/": {
    /** Представление для баннеров главной. */
    get: operations["banners_list"];
    parameters: {};
  };
  "/committee-meetings/": {
    /** Представление получения списка собраний по ID региона */
    get: operations["committee-meetings_list"];
    parameters: {};
  };
  "/committees/": {
    /** Представление для списка комитетов по запросу с параметром id региона РЗФ и id метсности. */
    get: operations["committees_list"];
    parameters: {};
  };
  "/committees/{id}/": {
    get: operations["committees_read"];
    parameters: {
      path: {
        /** A unique integer value identifying this Комитет. */
        id: number;
      };
    };
  };
  "/counter/": {
    get: operations["counter_list"];
    parameters: {};
  };
  "/daily-meditation/": {
    /** Представление для ежедневных размышлений. */
    get: operations["daily-meditation_list"];
    parameters: {};
  };
  "/events/": {
    get: operations["events_list"];
    post: operations["events_create"];
    parameters: {};
  };
  "/events/{id}/": {
    get: operations["events_read"];
    post: operations["events_create"];
    delete: operations["events_delete"];
    patch: operations["events_partial_update"];
    parameters: {
      path: {
        /** A unique integer value identifying this Мероприятие. */
        id: number;
      };
    };
  };
  "/get-city-list/": {
    /** Представление для вывода списка городов и регионов в модальное окно */
    get: operations["get-city-list_list"];
    parameters: {};
  };
  "/groups/": {
    get: operations["groups_list"];
    post: operations["groups_create"];
    parameters: {};
  };
  "/groups/{id}/": {
    get: operations["groups_read"];
    post: operations["groups_create"];
    delete: operations["groups_delete"];
    patch: operations["groups_partial_update"];
    parameters: {
      path: {
        /** A unique integer value identifying this Группа. */
        id: number;
      };
    };
  };
  "/jwt/create/": {
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web
     * token pair to prove the authentication of those credentials.
     */
    post: operations["jwt_create_create"];
    parameters: {};
  };
  "/jwt/refresh/": {
    /**
     * Takes a refresh type JSON web token and returns an access type JSON web
     * token if the refresh token is valid.
     */
    post: operations["jwt_refresh_create"];
    parameters: {};
  };
  "/jwt/verify/": {
    /**
     * Takes a token and indicates if it is valid.  This view provides no
     * information about a token's fitness for a particular use.
     */
    post: operations["jwt_verify_create"];
    parameters: {};
  };
  "/localities/": {
    /** Представление для списка местностей по запросу с параметром id региона РЗФ */
    get: operations["localities_list"];
    parameters: {};
  };
  "/localities/{id}/": {
    get: operations["localities_read"];
    parameters: {
      path: {
        /** A unique integer value identifying this Местность. */
        id: number;
      };
    };
  };
  "/meetings-today/": {
    /** Представление возвращает ближайшие собрания сегодня в городе или регионе */
    get: operations["meetings-today_list"];
    parameters: {};
  };
  "/metro-stations/": {
    /** Представление для станций метро по запросу с параметром id города или региона */
    get: operations["metro-stations_list"];
    parameters: {};
  };
  "/news/": {
    get: operations["news_list"];
    post: operations["news_create"];
    parameters: {};
  };
  "/news/{id}/": {
    get: operations["news_read"];
    post: operations["news_create"];
    delete: operations["news_delete"];
    patch: operations["news_partial_update"];
    parameters: {
      path: {
        /** A unique integer value identifying this Новость. */
        id: number;
      };
    };
  };
  "/scheduled-meetings/": {
    /** Получение собраний */
    get: operations["scheduled-meetings_list"];
    parameters: {};
  };
  "/scheduled-meetings/{id}/": {
    /** Получение и обновление расписания собрания по его ID */
    get: operations["scheduled-meetings_read"];
    /** Получение и обновление расписания собрания по его ID */
    post: operations["scheduled-meetings_create"];
    /** Получение и обновление расписания собрания по его ID */
    delete: operations["scheduled-meetings_delete"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/service-regions/": {
    /** Представление для вывода списка регионов обслуживания */
    get: operations["service-regions_list"];
    parameters: {};
  };
  "/service-regions/{id}/": {
    get: operations["service-regions_read"];
    parameters: {
      path: {
        /** A unique integer value identifying this Регион РЗФ. */
        id: number;
      };
    };
  };
  "/token/": {
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web
     * token pair to prove the authentication of those credentials.
     */
    post: operations["token_create"];
    parameters: {};
  };
  "/token/refresh/": {
    /**
     * Takes a refresh type JSON web token and returns an access type JSON web
     * token if the refresh token is valid.
     */
    post: operations["token_refresh_create"];
    parameters: {};
  };
  "/towns/": {
    /** Представление для вывода списка городов */
    get: operations["towns_list"];
    parameters: {};
  };
  "/users/": {
    get: operations["users_list"];
    post: operations["users_create"];
    parameters: {};
  };
  "/users/activation/": {
    post: operations["users_activation"];
    parameters: {};
  };
  "/users/me/": {
    get: operations["users_me_read"];
    put: operations["users_me_update"];
    delete: operations["users_me_delete"];
    patch: operations["users_me_partial_update"];
    parameters: {};
  };
  "/users/resend_activation/": {
    post: operations["users_resend_activation"];
    parameters: {};
  };
  "/users/reset_password/": {
    post: operations["users_reset_password"];
    parameters: {};
  };
  "/users/reset_password_confirm/": {
    post: operations["users_reset_password_confirm"];
    parameters: {};
  };
  "/users/reset_username/": {
    post: operations["users_reset_username"];
    parameters: {};
  };
  "/users/reset_username_confirm/": {
    post: operations["users_reset_username_confirm"];
    parameters: {};
  };
  "/users/set_password/": {
    post: operations["users_set_password"];
    parameters: {};
  };
  "/users/set_username/": {
    post: operations["users_set_username"];
    parameters: {};
  };
  "/users/{id}/": {
    get: operations["users_read"];
    put: operations["users_update"];
    delete: operations["users_delete"];
    patch: operations["users_partial_update"];
    parameters: {
      path: {
        /** A unique integer value identifying this Служащий. */
        id: number;
      };
    };
  };
}

export interface definitions {
  TokenCreate: {
    /** Password */
    password?: string;
    /** Email */
    email?: string;
  };
  ContentBanners: {
    /** ID */
    id?: number;
    /**
     * Картинка
     * Format: uri
     */
    image: string;
    /**
     * Кликабельная ссылка
     * Format: uri
     */
    link?: string;
    /** Активный */
    active?: boolean;
  };
  GroupLocation: {
    /** ID */
    id?: number;
    /** Короткое название */
    title: string;
    /** Широта и долгота */
    latitude_longitude?: string;
    /** Yandex company ID */
    ya_company_id?: string;
    /** Фрэйм карт */
    map: string;
    /** Адрес */
    address: string;
    /** Описание локации */
    place_description?: string;
    /** Доступность для инвалидов */
    accessibility_for_disabled?: boolean;
    /** Шаговая доступность */
    step_availability?: boolean;
    /**
     * Дата изменения информации
     * Format: date
     */
    edit_date_information?: string;
    /** Изображения */
    images?: string;
    /** Город локации */
    town?: number;
    metro_stations?: number[];
  };
  Group: {
    /** ID */
    id?: number;
    location?: definitions["GroupLocation"];
    /** Имя */
    name: string;
    /**
     * Ссылка
     * Format: slug
     */
    slug?: string;
    /** Описание */
    description?: string;
    /** Показывать карту */
    show_map?: boolean;
    /** Свободные служения */
    free_services?: string;
    /**
     * Email
     * Format: email
     */
    email?: string;
    /** Активна */
    active?: boolean;
    /** Город */
    town?: number;
    /** Местность группы */
    locality?: number;
    /** Служащий группы */
    servant?: number;
  };
  ScheduledMeeting: {
    /** ID */
    id?: number;
    group?: definitions["Group"];
    /** Продолжительность */
    duration?: string;
    /** Время начала */
    time: string;
    /**
     * День недели
     * @enum {string}
     */
    day_of_week: "1" | "2" | "3" | "4" | "5" | "6" | "7" | "0";
    /**
     * Какой по счёту в месяце
     * @enum {string}
     */
    schedule:
      | "12345"
      | "1"
      | "2"
      | "3"
      | "4"
      | "12"
      | "34"
      | "13"
      | "24"
      | "last"
      | "exclast"
      | "5";
    /** Онлайн */
    online?: boolean;
    /** Описание для онлайн */
    online_description?: string;
    /** Собрание какого подкомитета */
    committee?: number;
    /** Собрание какой местности */
    locality?: number;
    /** Локация */
    location?: number;
    /** Тип собрания */
    type: number;
  };
  Committee: {
    /** ID */
    id?: number;
    /** Имя */
    name: string;
    /**
     * Ссылка
     * Format: slug
     */
    slug: string;
    /** Описание */
    description?: string;
    /** Свободные служения */
    free_services?: string;
    /**
     * Email
     * Format: email
     */
    email?: string;
    /** Активна */
    active?: boolean;
    /** Регион РЗФ */
    service_region?: number;
    /** Местность комитета */
    locality?: number;
    /** Локация комитета */
    location?: number;
    /** Служащий комитета */
    servant?: number;
  };
  DailyMeditation: {
    /** Id */
    id?: number;
    /** День */
    day: number;
    /** Месяц */
    month: number;
    /** Заголовок */
    title: string;
    /** Цитата */
    quote: string;
    /** Источник цитаты */
    quote_from: string;
    /** Текст */
    body: string;
    /** Только сегодня */
    jft: string;
  };
  Event: {
    /** ID */
    id?: number;
    /**
     * Flyer
     * Format: uri
     */
    flyer?: string;
    /** Duration */
    duration?: string;
    /**
     * Время начала
     * Format: date-time
     */
    time: string;
    /** Заголовок (генерируется из типа если пустое) */
    title?: string;
    /** Описание */
    description?: string;
    /** Онлайн */
    online?: boolean;
    /** Глобальное */
    is_global?: boolean;
    /** Описание для онлайн */
    online_description?: string;
    /** Мероприятие какой группы */
    group?: number;
    /** Мероприятие какого подкомитета */
    committee?: number;
    /** Мероприятие какой местности */
    locality?: number;
    /** Мероприятие какого Региона РЗФ */
    service_region?: number;
    /** Географический регион мероприятия */
    geographic_region?: number;
    /** Тип мероприятия */
    type: number;
  };
  TokenObtainPair: {
    /** Username */
    username: string;
    /** Password */
    password: string;
  };
  TokenRefresh: {
    /** Refresh */
    refresh: string;
    /** Access */
    access?: string;
  };
  TokenVerify: {
    /** Token */
    token: string;
  };
  Locality: {
    /** ID */
    id?: number;
    /** Имя */
    name: string;
    /**
     * Ссылка
     * Format: slug
     */
    slug: string;
    /** Описание */
    description?: string;
    /** Свободные служения */
    free_services?: string;
    /**
     * Email
     * Format: email
     */
    email?: string;
    /** Активна */
    active?: boolean;
    /**
     * Логотип
     * Format: uri
     * @description Загрузите логотип
     */
    logo?: string;
    /** Регион РЗФ местности */
    service_region?: number;
    /** Служащий местности */
    servant?: number;
  };
  MetroStation: {
    /** ID */
    id?: number;
    /** Имя */
    name: string;
    /** HTML цвет */
    html_color: string;
    /** Город станции метро */
    town?: number;
  };
  News: {
    /** ID */
    id?: number;
    /**
     * Image
     * Format: uri
     */
    image?: string;
    /** Глобальная */
    is_global?: boolean;
    /**
     * Pub date
     * Format: date-time
     */
    pub_date?: string;
    /** Заголовок */
    title: string;
    /** Новость */
    description?: string;
    /** Новость какой группы */
    group?: number;
    /** Новость какого подкомитета */
    committee?: number;
    /** Новость какой местности */
    locality?: number;
    /** Новость какого Региона РЗФ */
    service_region?: number;
    /** Географический регион новости */
    geographic_region?: number;
  };
  ServiceRegion: {
    /** ID */
    id?: number;
    /** Имя */
    name: string;
    /** Описание */
    description?: string;
    /**
     * Ссылка
     * Format: slug
     */
    slug: string;
    /**
     * Email
     * Format: email
     */
    email?: string;
    /** Свободные служения региона */
    free_services?: string;
    /**
     * Логотип
     * Format: uri
     * @description Загрузите логотип
     */
    logo?: string;
    /** Служащий региона */
    servant?: number;
  };
  Town: {
    /** ID */
    id?: number;
    /** Имя */
    name: string;
    /**
     * Ссылка
     * Format: slug
     */
    slug: string;
    /** Is big */
    is_big?: boolean;
    /** Географический регион города */
    geographic_region?: number;
  };
  CurrentUser: {
    /** ID */
    id?: number;
    /**
     * Адрес электронной почты
     * Format: email
     * @description Введите адрес электронной почты
     */
    email: string;
    /**
     * Имя пользователя
     * @description Введите имя пользователя
     */
    username: string;
    /** Имя */
    first_name?: string;
    /** Фамилия */
    last_name?: string;
    /** Пароль */
    password: string;
  };
  CustomUserCreate: {
    /**
     * Адрес электронной почты
     * Format: email
     * @description Введите адрес электронной почты
     */
    email: string;
    /** ID */
    id?: number;
    /**
     * Имя пользователя
     * @description Введите имя пользователя
     */
    username: string;
    /** Имя */
    first_name?: string;
    /** Фамилия */
    last_name?: string;
    /** Password */
    password: string;
  };
  Activation: {
    /** Uid */
    uid: string;
    /** Token */
    token: string;
  };
  SendEmailReset: {
    /**
     * Email
     * Format: email
     */
    email: string;
  };
  PasswordResetConfirm: {
    /** Uid */
    uid: string;
    /** Token */
    token: string;
    /** New password */
    new_password: string;
  };
  UsernameResetConfirm: {
    /**
     * Адрес электронной почты
     * Format: email
     * @description Введите адрес электронной почты
     */
    new_email: string;
  };
  SetPassword: {
    /** New password */
    new_password: string;
    /** Current password */
    current_password: string;
  };
  SetUsername: {
    /** Current password */
    current_password: string;
    /**
     * Адрес электронной почты
     * Format: email
     * @description Введите адрес электронной почты
     */
    new_email: string;
  };
}

export interface operations {
  /** Use this endpoint to obtain user authentication token. */
  auth_token_login_create: {
    parameters: {
      body: {
        data: definitions["TokenCreate"];
      };
    };
    responses: {
      201: {
        schema: definitions["TokenCreate"];
      };
    };
  };
  /** Use this endpoint to logout user (remove user authentication token). */
  auth_token_logout_create: {
    parameters: {};
    responses: {
      201: unknown;
    };
  };
  /** Представление для баннеров главной. */
  banners_list: {
    parameters: {};
    responses: {
      200: {
        schema: definitions["ContentBanners"][];
      };
    };
  };
  /** Представление получения списка собраний по ID региона */
  "committee-meetings_list": {
    parameters: {};
    responses: {
      200: {
        schema: definitions["ScheduledMeeting"][];
      };
    };
  };
  /** Представление для списка комитетов по запросу с параметром id региона РЗФ и id метсности. */
  committees_list: {
    parameters: {
      query: {
        /** A search term. */
        name?: string;
      };
    };
    responses: {
      200: {
        schema: definitions["Committee"][];
      };
    };
  };
  committees_read: {
    parameters: {
      path: {
        /** A unique integer value identifying this Комитет. */
        id: number;
      };
    };
    responses: {
      200: {
        schema: definitions["Committee"];
      };
    };
  };
  counter_list: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  /** Представление для ежедневных размышлений. */
  "daily-meditation_list": {
    parameters: {};
    responses: {
      200: {
        schema: definitions["DailyMeditation"][];
      };
    };
  };
  events_list: {
    parameters: {
      query: {
        /** group */
        group?: string;
        /** committee */
        committee?: string;
        /** locality */
        locality?: string;
        /** service_region */
        service_region?: string;
        /** is_global */
        is_global?: string;
        /** Параметр для фильтрации по текущему служащему */
        responsible_servant?: boolean;
      };
    };
    responses: {
      200: {
        schema: definitions["Event"][];
      };
    };
  };
  events_create: {
    parameters: {
      path: {
        /** A unique integer value identifying this Мероприятие. */
        id: number;
      };
      body: {
        data: definitions["Event"];
      };
    };
    responses: {
      201: {
        schema: definitions["Event"];
      };
    };
  };
  events_read: {
    parameters: {
      path: {
        /** A unique integer value identifying this Мероприятие. */
        id: number;
      };
    };
    responses: {
      200: {
        schema: definitions["Event"];
      };
    };
  };
  events_delete: {
    parameters: {
      path: {
        /** A unique integer value identifying this Мероприятие. */
        id: number;
      };
    };
    responses: {
      204: never;
    };
  };
  events_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Мероприятие. */
        id: number;
      };
      body: {
        data: definitions["Event"];
      };
      query: {
        /** Параметр для фильтрации по текущему служащему */
        responsible_servant?: boolean;
      };
    };
    responses: {
      200: {
        schema: definitions["Event"];
      };
    };
  };
  /** Представление для вывода списка городов и регионов в модальное окно */
  "get-city-list_list": {
    parameters: {
      query: {
        /** A search term. */
        name?: string;
      };
    };
    responses: {
      200: unknown;
    };
  };
  groups_list: {
    parameters: {
      query: {
        /** town */
        town?: string;
        /** region */
        region?: string;
        /** metro */
        metro?: string;
        /** servant */
        servant?: string;
        /** A page number within the paginated result set. */
        page?: number;
        /** Number of results to return per page. */
        limit?: number;
        /** Параметр для фильтрации по текущему служащему */
        responsible_servant?: boolean;
      };
    };
    responses: {
      200: {
        schema: {
          count: number;
          /** Format: uri */
          next?: string;
          /** Format: uri */
          previous?: string;
          results: definitions["Group"][];
        };
      };
    };
  };
  groups_create: {
    parameters: {
      path: {
        /** A unique integer value identifying this Группа. */
        id: number;
      };
      body: {
        data: definitions["Group"];
      };
    };
    responses: {
      201: {
        schema: definitions["Group"];
      };
    };
  };
  groups_read: {
    parameters: {
      path: {
        /** A unique integer value identifying this Группа. */
        id: number;
      };
    };
    responses: {
      200: {
        schema: definitions["Group"];
      };
    };
  };
  groups_delete: {
    parameters: {
      path: {
        /** A unique integer value identifying this Группа. */
        id: number;
      };
    };
    responses: {
      204: never;
    };
  };
  groups_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Группа. */
        id: number;
      };
      body: {
        data: definitions["Group"];
      };
      query: {
        /** Параметр для фильтрации по текущему служащему */
        responsible_servant?: boolean;
      };
    };
    responses: {
      200: {
        schema: definitions["Group"];
      };
    };
  };
  /**
   * Takes a set of user credentials and returns an access and refresh JSON web
   * token pair to prove the authentication of those credentials.
   */
  jwt_create_create: {
    parameters: {
      body: {
        data: definitions["TokenObtainPair"];
      };
    };
    responses: {
      201: {
        schema: definitions["TokenObtainPair"];
      };
    };
  };
  /**
   * Takes a refresh type JSON web token and returns an access type JSON web
   * token if the refresh token is valid.
   */
  jwt_refresh_create: {
    parameters: {
      body: {
        data: definitions["TokenRefresh"];
      };
    };
    responses: {
      201: {
        schema: definitions["TokenRefresh"];
      };
    };
  };
  /**
   * Takes a token and indicates if it is valid.  This view provides no
   * information about a token's fitness for a particular use.
   */
  jwt_verify_create: {
    parameters: {
      body: {
        data: definitions["TokenVerify"];
      };
    };
    responses: {
      201: {
        schema: definitions["TokenVerify"];
      };
    };
  };
  /** Представление для списка местностей по запросу с параметром id региона РЗФ */
  localities_list: {
    parameters: {
      query: {
        /** A search term. */
        name?: string;
      };
    };
    responses: {
      200: {
        schema: definitions["Locality"][];
      };
    };
  };
  localities_read: {
    parameters: {
      path: {
        /** A unique integer value identifying this Местность. */
        id: number;
      };
    };
    responses: {
      200: {
        schema: definitions["Locality"];
      };
    };
  };
  /** Представление возвращает ближайшие собрания сегодня в городе или регионе */
  "meetings-today_list": {
    parameters: {};
    responses: {
      200: {
        schema: definitions["ScheduledMeeting"][];
      };
    };
  };
  /** Представление для станций метро по запросу с параметром id города или региона */
  "metro-stations_list": {
    parameters: {
      query: {
        /** A page number within the paginated result set. */
        page?: number;
        /** Number of results to return per page. */
        limit?: number;
      };
    };
    responses: {
      200: {
        schema: {
          count: number;
          /** Format: uri */
          next?: string;
          /** Format: uri */
          previous?: string;
          results: definitions["MetroStation"][];
        };
      };
    };
  };
  news_list: {
    parameters: {
      query: {
        /** group */
        group?: string;
        /** committee */
        committee?: string;
        /** locality */
        locality?: string;
        /** service_region */
        service_region?: string;
        /** is_global */
        is_global?: string;
        /** Параметр для фильтрации по текущему служащему */
        responsible_servant?: boolean;
      };
    };
    responses: {
      200: {
        schema: definitions["News"][];
      };
    };
  };
  news_create: {
    parameters: {
      path: {
        /** A unique integer value identifying this Новость. */
        id: number;
      };
      body: {
        data: definitions["News"];
      };
    };
    responses: {
      201: {
        schema: definitions["News"];
      };
    };
  };
  news_read: {
    parameters: {
      path: {
        /** A unique integer value identifying this Новость. */
        id: number;
      };
    };
    responses: {
      200: {
        schema: definitions["News"];
      };
    };
  };
  news_delete: {
    parameters: {
      path: {
        /** A unique integer value identifying this Новость. */
        id: number;
      };
    };
    responses: {
      204: never;
    };
  };
  news_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Новость. */
        id: number;
      };
      body: {
        data: definitions["News"];
      };
      query: {
        /** Параметр для фильтрации по текущему служащему */
        responsible_servant?: boolean;
      };
    };
    responses: {
      200: {
        schema: definitions["News"];
      };
    };
  };
  /** Получение собраний */
  "scheduled-meetings_list": {
    parameters: {
      query: {
        /** group */
        group?: string;
        /** committee */
        committee?: string;
        /** locality */
        locality?: string;
        /** service_region */
        service_region?: string;
        /** A page number within the paginated result set. */
        page?: number;
        /** Number of results to return per page. */
        limit?: number;
        /** Параметр для фильтрации по текущему служащему */
        responsible_servant?: boolean;
      };
    };
    responses: {
      200: {
        schema: {
          count: number;
          /** Format: uri */
          next?: string;
          /** Format: uri */
          previous?: string;
          results: definitions["ScheduledMeeting"][];
        };
      };
    };
  };
  /** Получение и обновление расписания собрания по его ID */
  "scheduled-meetings_read": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        schema: definitions["ScheduledMeeting"];
      };
    };
  };
  /** Получение и обновление расписания собрания по его ID */
  "scheduled-meetings_create": {
    parameters: {
      path: {
        id: string;
      };
      body: {
        data: definitions["ScheduledMeeting"];
      };
    };
    responses: {
      201: {
        schema: definitions["ScheduledMeeting"];
      };
    };
  };
  /** Получение и обновление расписания собрания по его ID */
  "scheduled-meetings_delete": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  /** Представление для вывода списка регионов обслуживания */
  "service-regions_list": {
    parameters: {
      query: {
        /** A search term. */
        name?: string;
        /** A page number within the paginated result set. */
        page?: number;
        /** Number of results to return per page. */
        limit?: number;
      };
    };
    responses: {
      200: {
        schema: {
          count: number;
          /** Format: uri */
          next?: string;
          /** Format: uri */
          previous?: string;
          results: definitions["ServiceRegion"][];
        };
      };
    };
  };
  "service-regions_read": {
    parameters: {
      path: {
        /** A unique integer value identifying this Регион РЗФ. */
        id: number;
      };
    };
    responses: {
      200: {
        schema: definitions["ServiceRegion"];
      };
    };
  };
  /**
   * Takes a set of user credentials and returns an access and refresh JSON web
   * token pair to prove the authentication of those credentials.
   */
  token_create: {
    parameters: {
      body: {
        data: definitions["TokenObtainPair"];
      };
    };
    responses: {
      201: {
        schema: definitions["TokenObtainPair"];
      };
    };
  };
  /**
   * Takes a refresh type JSON web token and returns an access type JSON web
   * token if the refresh token is valid.
   */
  token_refresh_create: {
    parameters: {
      body: {
        data: definitions["TokenRefresh"];
      };
    };
    responses: {
      201: {
        schema: definitions["TokenRefresh"];
      };
    };
  };
  /** Представление для вывода списка городов */
  towns_list: {
    parameters: {
      query: {
        /** A search term. */
        name?: string;
        /** A page number within the paginated result set. */
        page?: number;
        /** Number of results to return per page. */
        limit?: number;
        /** Параметр для олучения всех доступных значений */
        all?: boolean;
      };
    };
    responses: {
      200: {
        schema: {
          count: number;
          /** Format: uri */
          next?: string;
          /** Format: uri */
          previous?: string;
          results: definitions["Town"][];
        };
      };
    };
  };
  users_list: {
    parameters: {};
    responses: {
      200: {
        schema: definitions["CurrentUser"][];
      };
    };
  };
  users_create: {
    parameters: {
      body: {
        data: definitions["CustomUserCreate"];
      };
    };
    responses: {
      201: {
        schema: definitions["CustomUserCreate"];
      };
    };
  };
  users_activation: {
    parameters: {
      body: {
        data: definitions["Activation"];
      };
    };
    responses: {
      201: {
        schema: definitions["Activation"];
      };
    };
  };
  users_me_read: {
    parameters: {};
    responses: {
      200: {
        schema: definitions["CurrentUser"][];
      };
    };
  };
  users_me_update: {
    parameters: {
      body: {
        data: definitions["CurrentUser"];
      };
    };
    responses: {
      200: {
        schema: definitions["CurrentUser"];
      };
    };
  };
  users_me_delete: {
    parameters: {};
    responses: {
      204: never;
    };
  };
  users_me_partial_update: {
    parameters: {
      body: {
        data: definitions["CurrentUser"];
      };
    };
    responses: {
      200: {
        schema: definitions["CurrentUser"];
      };
    };
  };
  users_resend_activation: {
    parameters: {
      body: {
        data: definitions["SendEmailReset"];
      };
    };
    responses: {
      201: {
        schema: definitions["SendEmailReset"];
      };
    };
  };
  users_reset_password: {
    parameters: {
      body: {
        data: definitions["SendEmailReset"];
      };
    };
    responses: {
      201: {
        schema: definitions["SendEmailReset"];
      };
    };
  };
  users_reset_password_confirm: {
    parameters: {
      body: {
        data: definitions["PasswordResetConfirm"];
      };
    };
    responses: {
      201: {
        schema: definitions["PasswordResetConfirm"];
      };
    };
  };
  users_reset_username: {
    parameters: {
      body: {
        data: definitions["SendEmailReset"];
      };
    };
    responses: {
      201: {
        schema: definitions["SendEmailReset"];
      };
    };
  };
  users_reset_username_confirm: {
    parameters: {
      body: {
        data: definitions["UsernameResetConfirm"];
      };
    };
    responses: {
      201: {
        schema: definitions["UsernameResetConfirm"];
      };
    };
  };
  users_set_password: {
    parameters: {
      body: {
        data: definitions["SetPassword"];
      };
    };
    responses: {
      201: {
        schema: definitions["SetPassword"];
      };
    };
  };
  users_set_username: {
    parameters: {
      body: {
        data: definitions["SetUsername"];
      };
    };
    responses: {
      201: {
        schema: definitions["SetUsername"];
      };
    };
  };
  users_read: {
    parameters: {
      path: {
        /** A unique integer value identifying this Служащий. */
        id: number;
      };
    };
    responses: {
      200: {
        schema: definitions["CurrentUser"];
      };
    };
  };
  users_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Служащий. */
        id: number;
      };
      body: {
        data: definitions["CurrentUser"];
      };
    };
    responses: {
      200: {
        schema: definitions["CurrentUser"];
      };
    };
  };
  users_delete: {
    parameters: {
      path: {
        /** A unique integer value identifying this Служащий. */
        id: number;
      };
    };
    responses: {
      204: never;
    };
  };
  users_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this Служащий. */
        id: number;
      };
      body: {
        data: definitions["CurrentUser"];
      };
    };
    responses: {
      200: {
        schema: definitions["CurrentUser"];
      };
    };
  };
}

export interface external {}
